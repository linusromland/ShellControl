name: Build and push

on:
    push:
        branches: [feature/distribute]

jobs:
    build-and-push:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Extract version from package.json
              run: echo "VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV

            - name: Check if GitHub release with version already exists
              run: |
                  if curl --silent --fail --location "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }}" > /dev/null; then
                    echo "RELEASE_EXISTS=yes" >> $GITHUB_ENV
                  else
                    echo "RELEASE_EXISTS=no" >> $GITHUB_ENV
                  fi

            - name: Install all dependencies
              run: npm run install-all

            - name: Build API
              run: cd apps/api && npm run build

            - name: Package API
              run: cd apps/api && npm run package

            - name: Build Electron
              run: cd apps/client && npm run build

            - name: Upload Installers
              if: env.RELEASE_EXISTS == 'no'
			  uses: actions/upload-artifact@v2
			  with:
				name: installer
				path: |
				  apps/client/release/${{ env.VERSION }}/*setup*
	  
			- name: Create GitHub Release
			  if: env.RELEASE_EXISTS == 'no'
			  uses: actions/create-release@v1
			  env:
				GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
			  with:
				tag_name: ${{ env.VERSION }}
				release_name: ${{ env.VERSION }}
				draft: false
				prerelease: false
				files: |
				  apps/client/release/${{ env.VERSION }}/*setup*
            - name: Update Release Notes
              if: env.RELEASE_EXISTS == 'no'
              run: |
                  VERSION=${{ env.VERSION }}
                  RELEASE_NOTES=$(awk -v ver="$VERSION" 'BEGIN {RS="## "; FS="\n"} $1 ~ ver {for (i=2; i<=NF; i++) print $i}' CHANGELOG.md)
                  RELEASE_NOTES_ESCAPED=$(echo "$RELEASE_NOTES" | sed ':a;N;$!ba;s/\n/\\n/g')
                  RELEASE_URL="https://api.github.com/repos/${{ github.repository }}/releases/tags/v$VERSION"
                  RELEASE_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $RELEASE_URL | jq -r .id)
                  UPDATE_URL="https://api.github.com/repos/${{ github.repository }}/releases/$RELEASE_ID"
                  curl -s -X PATCH -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" -H "Content-Type: application/json" -d "{\"body\": \"$RELEASE_NOTES_ESCAPED\"}" $UPDATE_URL
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
